<?php
function name() {
    echo "Это моё имя";
}
//name(); вызов функции


//          указано 2 аргумента
function myCar($car, $color) {
    echo "Марка машины: $car и она имеет $color цвет";
}
$color = "белый";
// вызываем функцию и передаем ей 2 аргумента
myCar("Lexus", $color);

function firstName($fname, $year) {
    echo "<br>$fname Иванова. Родилась в $year";
}
firstName("biba", "1991");
firstName("Галя", "1978");
firstName("Света", "1983 <br>");

//По умолчанию параметры функции передаются по значению, поэтому, если значение
//аргумента внутри функции изменяется, оно не затрагивается вне функции.
//Если нужно позволить функции изменять значения параметров, последние должны быть переданы по ссылке.
//Передача параметров по ссылке выполняется добавлением амперсанда (&) к имени
//параметра в определении функции, как показано в примере ниже:
function getNum(&$num) {
    $num *= $num;
    return $num;
}
 $myNum = "5";
echo "$myNum <br>";
getNum($myNum);
echo "$myNum <br>";

function getYear(string $name, int|string $year=15) {
    echo "$name: возраст $year лет <br>";
}
echo getYear("джил", 19);
echo getYear("стха", 49);



//Функции могут возвращать значения в ту часть PHP сценария, из которой они были вызваны.
// Для возврата значения используется ключевое слово return. Возвращаемое значение может быть любого типа,
// включая массивы и объекты.
//Оператор return может распологаться в любом месте функции. Когда интерпретатор доходит к оператору return,
// функция возвращает значение (если указано) и завершает свое выполнение.
// Если оператор return не указан или не указано возвращаемое значение, то функция вернет значение NULL
function getSum($num1, $num2, $num3,) {
    $product = $num1+$num2+$num3;
    return $product;
}
$result = getSum(5,4,6);
echo $result;




//Функция не может возвращать несколько значений.
//Но мы можем получить несколько результатов, возвращая массив:
function divideNum($dividend, $divisor){
    $quotient = $dividend / $divisor;
    $array = array($dividend, $divisor, $quotient);
    return $array;
}
// Инициализация переменных значениями из массива
list($dividend, $divisor, $quotient) = divideNum(15, 3);
echo $dividend; // Результат: 15
echo $divisor; // Результат: 3
echo $quotient; // Результат: 5




//директива declare(strict_types=1);, которая как раз и включает строгий режим.
//В строгом режиме будет принята только переменная точного, заданного типа, или будет выброшен TypeError.
//Единственное исключение из этого правила состоит в том, что функция, ожидающая float, может давать целое число.
function getSuum(int $a, int $b) {
    return $a + $b;
}
getSuum(7,"7 days");  //PHP Fatal error: если будет использована директива declare;


//declare(strict_types=1); // включение strict
function getSumm(float $a, float $b): float { // двоеточие показывает какой тип данных мы хотим вернуть
    return $a + $b;
}
echo getSum(1.5, 2.3); // вернёт 3.8


mysqli;  // это расшитрение в php Представляет соединение между PHP и базой данных MySQL.\

mysqli_connect(); //функция устанавливает соединение с сервером базы данных.
// Пример: mysqli_connect(<адрес сервера>, <имя пользователя>, <пароль>, <имя базы данных>);

mysqli_connect_errno(); // Возвращает код ошибки последней попытки соединения

mysqli_connect_error(); // Возвращает описание последней ошибки подключения

mysqli_query(); //  Выполняет запрос к базе данных
// Пример:    mysqli_query($connect, "SET NAMES utf8");

mysqli_fetch_all(); //Извлекает все строки результатов в виде ассоциативного массива, числового массива или того и другого

mysqli_fetch_assoc(); //Возвращает ряд результата запроса в качестве ассоциативного массива