// При написании скриптов зачастую встаёт задача сделать однотипное действие много раз.
// Например, вывести товары из списка один за другим. Или просто перебрать все числа от 1 до 10 и для каждого выполнить одинаковый код.
// Для многократного повторения одного участка кода предусмотрены циклы.

                                              // Цикл «while»
// Цикл while имеет следующий синтаксис:
    while (condition) {
        // код
        // также называемый "телом цикла"
    }
// Код из тела цикла выполняется, пока условие condition истинно.


// Например, цикл ниже выводит i, пока i < 3:
let i = 0;
while (i < 3) { // выводит 0, затем 1, затем 2
    alert( i );
    i++;
} //Одно выполнение тела цикла по-научному называется итерация. Цикл в примере выше совершает три итерации.
// Если бы строка i++ отсутствовала в примере выше, то цикл бы повторялся (в теории) вечно.
// На практике, конечно, браузер не позволит такому случиться, он предоставит пользователю
// возможность остановить «подвисший» скрипт, а JavaScript на стороне сервера придётся «убить» процесс

// Любое выражение или переменная может быть условием цикла,
// а не только сравнение: условие while вычисляется и преобразуется в логическое значение.
// Например, while (i) – более краткий вариант while (i != 0):
let u = 3;
while (i) { // когда i будет равно 0, условие станет ложным, и цикл остановится
    alert( u );
    u--;
}




//                                                Цикл «do…while»
// Проверку условия можно разместить под телом цикла, используя специальный синтаксис do..while:
do {
    // тело цикла
} while (condition);

// Цикл сначала выполнит тело, а затем проверит условие condition, и пока его значение равно true,
// он будет выполняться снова и снова.
// Например:

let i = 0;
do {
    alert( i );
    i++;
} while (i < 3);
// Такая форма синтаксиса оправдана, если вы хотите, чтобы тело цикла выполнилось хотя бы один раз,
// даже если условие окажется ложным





//                                                   Цикл «for»
// Более сложный, но при этом самый распространённый цикл — цикл for.
// Выглядит он так:
    for (начало; условие; шаг) {
        // ... тело цикла ...
    }
// Давайте разберёмся, что означает каждая часть, на примере.
// Цикл ниже выполняет alert(i) для i от 0 до (но не включая) 3:

for (let i = 0; i < 3; i++) { // выведет 0, затем 1, затем 2
    alert(i);
}
// Рассмотрим конструкцию for подробней:
// начало	let i = 0	Выполняется один раз при входе в цикл
// условие	i < 3	Проверяется перед каждой итерацией цикла. Если оно вычислится в false, цикл остановится.
// тело	alert(i)	Выполняется снова и снова, пока условие вычисляется в true.
// шаг	i++	Выполняется после тела цикла на каждой итерации перед проверкой условия.
// В целом, алгоритм работы цикла выглядит следующим образом:

//     Выполнить начало
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → (Если условие == true → Выполнить тело, Выполнить шаг)
// → ...
// То есть, начало выполняется один раз, а затем каждая итерация заключается
// в проверке условия, после которой выполняется тело и шаг.
// Если тема циклов для вас нова, может быть полезным вернуться к примеру
// выше и воспроизвести его работу на листе бумаги, шаг за шагом.

// Вот в точности то, что происходит в нашем случае:
for (let i = 0; i < 3; i++) alert(i)
// Выполнить начало
    let r = 0;
// Если условие == true → Выполнить тело, Выполнить шаг
if (i < 3) { alert(i); i++ }
// Если условие == true → Выполнить тело, Выполнить шаг
if (i < 3) { alert(i); i++ }
// Если условие == true → Выполнить тело, Выполнить шаг
if (i < 3) { alert(i); i++ }
// ...конец, потому что теперь i == 3



// Прерывание цикла: «break»
// Обычно цикл завершается при вычислении условия в false.
// Но мы можем выйти из цикла в любой момент с помощью специальной директивы break.
// Например, следующий код подсчитывает сумму вводимых чисел до тех пор,
// пока посетитель их вводит, а затем – выдаёт:
let sum = 0;
while (true) {
    let value = +prompt("Введите число", '85');
    if (!value) break; // (*)
    sum += value;
}
alert( 'Сумма: ' + sum );
// Директива break в строке (*) полностью прекращает выполнение цикла и передаёт
// управление на строку за его телом, то есть на alert.
// Вообще, сочетание «бесконечный цикл + break» – отличная штука для тех ситуаций,
// когда условие, по которому нужно прерваться, находится не в начале или конце цикла,
// а посередине или даже в нескольких местах его тела.